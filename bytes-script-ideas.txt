1. "Whiteboard Wednesdays" - Fun take on common comp sci problems. Go over something like 'Fizz Buzz' in a language agnostic way. Talk about how you tackle the problem. Give people an idea of what employers are actually checking for when they have you solve these problems.

2. Setting up a development environment - talk about barrier to entry on new tasks, tell story about how I've been helping a lot of beginners troubleshoot and most of them will drop out without even trying because 'not knowing' is embarrassing. People get frustrated and don't ask for help. It ends up being a barrier to learning.

3. Ada Lovelace - People think you have to do x, y, and z in order to be a good programmer. In many instances, they think you need to do those things before you even start learning (e.g. master command line, get better at git, etc). Ada's story is really cool because she learned to program before the first computer (difference engine) was ever built.

4. George Washington N+1 problem...make it language agnostic though. Talk about why N+1 is so dangerous in programming. How to keep an eye out for it. How to solve it.

5. Nerdy ("nervy") song about programming. Tons of programming terms, concepts, etc. Could make a really fun/simple/catchy song.

6. My attempt to sim the Monty Hall problem. Watched YT video, didn’t quite believe it, had to code it for myself. Story and pseudocode.

7. Ambiguity! Logic, “stolen painting found by tree” ;) and why computers need consistency (but high-level languages fight over whether or not to have overloaded operators like +)

8. Example.com domain - who owns it, does anyone see all the email sent to @example.com, could you do any interesting data analysis of which test email Addie's get used (jessica@ vs dkwon@), is it in other languages (ejemplo.com por ejemplo)

9. Ada Lovelace - talk about her poet father and how her mom wanted her to be a scientist, corresponded with Babbage about his analytics engine,wrote algorithm before it was built (chicken egg situation but programming came first)

10. Plane travel - fly by wire (controls no longer physically moving parts), auto pilot (in 3 dimensions!), possibly why airlines still don't all have free wifi (or any wifi)

11. Turn signals - some are just pressure activated, others have sophisticated timing mechanisms (algos) to keep traffic moving smoothly

12. Something about OSS talking about how so much of it is critical infrastructure and completely unpaid (Heartbleed guys, FatherTime, jquery)

13. Bio mimicry from a software angle?

14. Superlatives - longest running piece of software, oldest software, most expensive software

15. Answer question which language is the best language (which will of course not have an answer but will provide a way to look at different types of and purposes for a language)

16. Have any animals written computer programs?

17. Look at programs that allow brain signals to manipulate real world objects (how do they work...are they super complicated or is it simple once you get the electrical signal from the brain)

18. Most popular programming languages by region (Korea == Java) and why

19. How does a circuit gate actually work? What does it mean for it to be a 1 or a 0? Does it work the same way in space?

20. Talk about different robotics competitions and how interested parties can get involved...hopefully get a free robot from the soccer boys people because that bot is $16,000

21. How does autocorrect work (or not work, as the case may be) #askingforafriend #botiswhatimeant

22. #1 thing holding software back today (initially it was memory/processing speed - is that still the case?).

23. What's so cool about quantum computing? Is it only for ridiculously big data or will it make a difference for every day use?

24. The memory curve (how it doubled every time period and the growth was exponential). Is that still happening? Does it even matter? Is lack of memory still an issue now that people have terabytes of it?

25. Any stories where a software bug changed or nearly changed the course of history? Perhaps a spy got info that was critical or a system malfunctioned at exactly the wrong moment...

26. A more in depth look at Mehls law (computers are always better than humans at things)

27. Computers that make art. Are any of them good at it? Can the average person tell the difference between computer and human generated art? What about experts? Mention the Ted Talk prize for a talk written by computers that people can't tell was written by computers.

28. Have computers ever discovered new mathematical premises or scientific theories on their own through pattern matching and abstraction (perhaps how humans knew there had to be another planet but didn't have tools that could find it yet)

29. Code that can write code? Difference between it coding something else vs it coding itself?

30. Code overview topics (in a fun way): functional vs oo language, static vs dynamic type, compiled vs interpreted, big o notation, sorting algorithms, recursion 

31. Using what you do as a way of identifying you (touched on it in passwords). Really intrigued by governments using it it to identify anonymous people (log key stokes on anon sites then math to fingerprint on known sites). Also key delay software to combat this.

32. What is a public/private key, how does it work..story about government trying to get all the keys so the guy made the tech FOSS so it couldn't be controlled. Funny how much tech people are demonized as high powered elite when they'll often give away their greatest development for free

33. Dijkstra - the man who keeps us from getting lost, path finding algorithms, map programs

34. Robots beating humans at games. Why is it significant? First one (chess?), talk about Jeopardy with Watson (other applications for Watson like medical diagnosis) and recent Go defeat

35. How do cellphones always know what time it is. Check and see if the story of the phone company in Australia incorrectly setting the clock forward so everyone got up an hour early is true

36. What makes something a virus, a worm, a Trojan horse, etc? What was the first? What was the worst? Who makes them?

37. What's an operating system and why does software made for one not work on another? Little Endian/Big Endian

38. Atomic time, UTC (include story about English "UCT" vs French "TCU" committee decide "UTC"). 

39. How does AI work in FPS (shooters)?

40. Kills screens in games. DK kill screen (integer overflow) caused time calculation to be wrong and gave only 7 seconds for a level. http://errors.wikia.com/wiki/DK_kill_screen

41. Use previous frame and shift rows in memory register instead of copying and redrawing pixels on screen 'dirty rect' (udacity video, John Carmack, Dangerous Dave in Copywrite Infringement, birth of Id Software) why was it used, is it still a problem (e.g. desktops not being able to render graphics the same way consoles could)

42. The good bad bug (bugs that become features in games)

43. Pixar development - 2 years working on ability to technical animation a realistic looking Shocktopus

44. Voting Machines and how they work - can they be hacked?

45. How do game coders deal with / work around lagbots? History and dev. (see also #39)

46. Procedurally generated levels and No Man's Sky

47. Talking about general artificial intelligence and how it can analogize from one task to another (mentioned at end of Go - AlphaGo good at Go, but can't even play chess)

48. Player adjusted difficulty (e.g. the Director in Left for Dead, could tell this story because this story is my story)

49. Id Software's Doom engine wasn't actually a true 3D engine at all, but a very well conceived two dimensional sector-based engine with 2D sprites representing objects, characters, and anything not tied down to the map. Because of this 2D limitation, rooms could not be stacked on top of one another, but this also allowed for faster rendering on the less powerful hardware of the time. All that was needed to run Doom was a 386 level PC (in low-detail mode) with a standard VGA video card capable of rendering texture-mapped environments.  Id created the illusion of 3D with height differences added separately to the environment...

50. DRM kills, millions of bunnies in 2nd life going 'to sleep' because the company that owns them (they were licensed to purchasers) lost a lawsuit. You have to feed them a purchased food every X period of time to wake them up.  With the company going out of business, the food is no longer available.
