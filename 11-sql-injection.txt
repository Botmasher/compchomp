This past week I recevieved email from not one but TWO sites I frequently use warning me about "reused password attacks".  It seems millions of passwords had been stolen from OTHER sites and the hackers were now trying those logins out on sites across the web.  Every year millions of your email addresses, passwords, credit cards (you get the idea) get stolen by hackers.  And 62.75% of the time (that's not a real percent, but, honestly, most of the time) what screws you over is the most devious, simplest little hack around, oldest trick in the book.

[INTRO]

Welcome to CompChomp...the only show on the internet wWere digital trypanophobia is a thing! Look it up. Cuz we did.

You and your BFFs get together to crank out your next multi-million dollar app idea - a restaurant finder for dragon lovers.  You build a snazzy login page full of dragony delights.  Then you realize, when someone logs in, you need to store that information somewhere.  You do that in a database.

Think of a database as a bank vault that can be filled with information. Any kind of information.  From the mundane, 'sexycoder5' has logged in 47 times, to the embarrassing, the fact that my user name is 'sexycoder5' , to the valuable - like my social security number - 093....haha...you didn't think I'd give it away that easy did you?

Structured Query Language (SQL to its friends) is a language used to talk to databases. If we want to torture that bank metaphor a bit more, SQL is like a very simplistic bank teller - as long as you fill out the bank slip correctly, info flows in and out of the vault - no questions asked.

And that setup works great...as long as your database will never be touched by an untrusted source....which is not how most web applications work.  We need to get data from our users into our application.  So we put up forms asking for name, email address and password.  There are fields for telling us what you're searching for.  We add check boxes and radio buttons and encourage people to leave a comment below.  And we definitely want strangers to our apps because Eatz for Dragonloverz will not be successful if your mom is the only one using it.  Especially if she gives it a 1-star rating.  "You haven't called in 3 days." is not legitimate feedback, Mom!

	# Personalize that shady mcshadester a bit more. He's a character now.

So you take that information the strangers put into your forms and you send it to your database. And things are usually fine because most people just want your program to work as expected. But, one day, a shady mcshadester like this signs into your app (which of course is like Uber for Yelp or AirBnB for dinner or whatever) and he searches for the following restaurant:

'); DELETE FROM Restaurants --

Which turns into the following SQL query:

SELECT "restaurant".* FROM "restaurants" WHERE (name LIKE '%'); DELETE FROM Restaurants -- %â€™)

And, suddenly, your entire restaurant table is gone....not your table at the restaurant...your restaurant table in your database.  Though you should probably cancel those reservations because you're going to be spending the rest of the night restoring your database from backups.

	# Story 1 is over. Now you're transitioning us from seeing the sequence of events that everyone goes through in building their apps to understanding the real-world consequences. Can you do this in a way that we care about more? "But surely these big businesses with their shiny logos and trusted brands that make me scroll through these thousand page contracts know about this. You'd think so, but..."

This nasty little trick is known as SQL injection.  It's when someone closes out a legitimate transaction with your database then immediately sneaks more SQL commands in there so they can interact with your database in a way you didn't intend.  And it happens all the time!

	# Two options here. 1: spend time giving us one solid example we can really feel. 2: keep this one-two-three punch list but tighten it up so it's both humorous and oh so bad that this is going on. Stripping names, brand identity and details totally takes the teeth out of these examples, but I get the reluctance. Can you be bold in other ways that keep our interest or at least bring us back to meet you where we know what you know and care like you care? (Do you care about these hacks? Why???)

June 2011, a major entertainment conglomerate lost the data of over 1,000,000 users, including passwords that were reportedly stored in plain text.  Ouch!

October of 2012, SQL injection is used to steal the personal records of thousands of students from 53 top universities around the world.  Student info is highly sought after because they usually have great credit records and they don't watch their credit scores.  I guess that's one positive side effect of crushing student debt...by the time you graduate, no one wants to steal your identity.

In August 2014, hackers in Russian stole 1.2 billion username and password combinations and 500,000 email addresses from 400,000 sites.  Not just small sites made by your cousin's best friend's uncle's kid who sort of knows how to code.  This hack included sites built by Fortune 500 companies.

More recently in November 2015, an electronic toy company was hacked and the personal data of 5 million parents and 200,000 kids was taken.

So, how do we put an end to this? 

	# We're already thinking this. Especially if you hit us with the real-world lashes, we're left with a sting and wide open for something more frustratedly direct - "What's sad is none of this even needed to happen!" or "The real tragedy here is how easy this is to fix/avoid." Then back to the story. Not user-provided data directly to your database, but when user X signs up make sure you don't store user X's stuff right in the vault. Clean it up first.

Make sure that user-provided data is never sent directly to your database.  It should always be sanitized first so none of the characters that have special meaning to SQL databases are treated as anything other than a string.

You should also use prepared statements.  This is where you send the SQL query to the database with placeholders where you're going to add user information later.  Then, when the statement comes through with the user's input, anything in place of a placeholder can only be treated as a string.  Captain Hacksalot can stuff it full of all the SQL he wants and your data is still safe.

	# Shady McShadester it was, no? Stay with your story! Unless there are two characters after me now. Wait... mebbe... now I'm REALLY scared!!!

Small price to pay to keep your app out of the news for all the wrong reasons.

	# Possibly can stay in character and end this within the story. The last thing we want is for you to see your twitter blow up when Dragonsterauntchamacallit gets hacked and we found out that an anonymous IP address in Russia is threatening to leak your million names, addresses and credit cards. Sanitize that.

CHOMP!
