1. "Whiteboard Wednesdays" - Fun take on common comp sci problems. Go over something like 'Fizz Buzz' in a language agnostic way. Talk about how you tackle the problem. Give people an idea of what employers are actually checking for when they have you solve these problems.

2. Setting up a development environment - talk about barrier to entry on new tasks, tell story about how I've been helping a lot of beginners troubleshoot and most of them will drop out without even trying because 'not knowing' is embarrassing. People get frustrated and don't ask for help. It ends up being a barrier to learning.

3. Ada Lovelace - People think you have to do x, y, and z in order to be a good programmer. In many instances, they think you need to do those things before you even start learning (e.g. master command line, get better at git, etc). Ada's story is really cool because she learned to program before the first computer (difference engine) was ever built.

4. George Washington N+1 problem...make it language agnostic though. Talk about why N+1 is so dangerous in programming. How to keep an eye out for it. How to solve it.

5. Nerdy ("nervy") song about programming. Tons of programming terms, concepts, etc. Could make a really fun/simple/catchy song.

6. My attempt to sim the Monty Hall problem. Watched YT video, didn’t quite believe it, had to code it for myself. Story and pseudocode.

7. Ambiguity! Logic, “stolen painting found by tree” ;) and why computers need consistency (but high-level languages fight over whether or not to have overloaded operators like +)

8. Example.com domain - who owns it, does anyone see all the email sent to @example.com, could you do any interesting data analysis of which test email Addie's get used (jessica@ vs dkwon@), is it in other languages (ejemplo.com por ejemplo)

9. Ada Lovelace - talk about her poet father and how her mom wanted her to be a scientist, corresponded with Babbage about his analytics engine,wrote algorithm before it was built (chicken egg situation but programming came first)

10. Plane travel - fly by wire (controls no longer physically moving parts), auto pilot (in 3 dimensions!), possibly why airlines still don't all have free wifi (or any wifi)

11. Turn signals - some are just pressure activated, others have sophisticated timing mechanisms (algos) to keep traffic moving smoothly

12. Something about OSS talking about how so much of it is critical infrastructure and completely unpaid (Heartbleed guys, FatherTime, jquery)

13. Bio mimicry from a software angle?

14. Superlatives - longest running piece of software, oldest software, most expensive software

15. Answer question which language is the best language (which will of course not have an answer but will provide a way to look at different types of and purposes for a language)

16. Have any animals written computer programs?

17. Look at programs that allow brain signals to manipulate real world objects (how do they work...are they super complicated or is it simple once you get the electrical signal from the brain)

18. Most popular programming languages by region (Korea == Java) and why

19. How does a circuit gate actually work? What does it mean for it to be a 1 or a 0? Does it work the same way in space?

20. Talk about different robotics competitions and how interested parties can get involved...hopefully get a free robot from the soccer boys people because that bot is $16,000

21. How does autocorrect work (or not work, as the case may be) #askingforafriend #botiswhatimeant

22. #1 thing holding software back today (initially it was memory/processing speed - is that still the case?).

23. What's so cool about quantum computing? Is it only for ridiculously big data or will it make a difference for every day use?

24. The memory curve (how it doubled every time period and the growth was exponential). Is that still happening? Does it even matter? Is lack of memory still an issue now that people have terabytes of it?

25. Any stories where a software bug changed or nearly changed the course of history? Perhaps a spy got info that was critical or a system malfunctioned at exactly the wrong moment...

26. A more in depth look at Mehls law (computers are always better than humans at things)

27. Computers that make art. Are any of them good at it? Can the average person tell the difference between computer and human generated art? What about experts? Mention the Ted Talk prize for a talk written by computers that people can't tell was written by computers.

28. Have computers ever discovered new mathematical premises or scientific theories on their own through pattern matching and abstraction (perhaps how humans knew there had to be another planet but didn't have tools that could find it yet)

29. Code that can write code? Difference between it coding something else vs it coding itself?

30. Code overview topics (in a fun way): functional vs oo language, static vs dynamic type, compiled vs interpreted, big o notation, sorting algorithms, recursion 

31. Using what you do as a way of identifying you (touched on it in passwords). Really intrigued by governments using it it to identify anonymous people (log key stokes on anon sites then math to fingerprint on known sites). Also key delay software to combat this.

32. What is a public/private key, how does it work..story about government trying to get all the keys so the guy made the tech FOSS so it couldn't be controlled. Funny how much tech people are demonized as high powered elite when they'll often give away their greatest development for free

33. Dijkstra - the man who keeps us from getting lost, path finding algorithms, map programs

34. Robots beating humans at games. Why is it significant? First one (chess?), talk about Jeopardy with Watson (other applications for Watson like medical diagnosis) and recent Go defeat

35. How do cellphones always know what time it is. Check and see if the story of the phone company in Australia incorrectly setting the clock forward so everyone got up an hour early is true

36. What makes something a virus, a worm, a Trojan horse, etc? What was the first? What was the worst? Who makes them?

37. What's an operating system and why does software made for one not work on another? Little Endian/Big Endian

38. Atomic time, UTC (include story about English "UCT" vs French "TCU" committee decide "UTC"). 

39. How does AI work in FPS (shooters)?

40. Kills screens in games. DK kill screen (integer overflow) caused time calculation to be wrong and gave only 7 seconds for a level. http://errors.wikia.com/wiki/DK_kill_screen

41. Use previous frame and shift rows in memory register instead of copying and redrawing pixels on screen 'dirty rect' (udacity video, John Carmack, Dangerous Dave in Copywrite Infringement, birth of Id Software) why was it used, is it still a problem (e.g. desktops not being able to render graphics the same way consoles could)

42. The good bad bug (bugs that become features in games)

43. Pixar development - 2 years working on ability to technical animation a realistic looking Shocktopus

44. Voting Machines and how they work - can they be hacked?

45. How do game coders deal with / work around lagbots? History and dev. (see also #39)

46. Procedurally generated levels and No Man's Sky

47. Talking about general artificial intelligence and how it can analogize from one task to another (mentioned at end of Go - AlphaGo good at Go, but can't even play chess)

48. Player adjusted difficulty (e.g. the Director in Left for Dead, could tell this story because this story is my story)

49. Id Software's Doom engine wasn't actually a true 3D engine at all, but a very well conceived two dimensional sector-based engine with 2D sprites representing objects, characters, and anything not tied down to the map. Because of this 2D limitation, rooms could not be stacked on top of one another, but this also allowed for faster rendering on the less powerful hardware of the time. All that was needed to run Doom was a 386 level PC (in low-detail mode) with a standard VGA video card capable of rendering texture-mapped environments.  Id created the illusion of 3D with height differences added separately to the environment...

50. DRM kills, millions of bunnies in 2nd life going 'to sleep' because the company that owns them (they were licensed to purchasers) lost a lawsuit. You have to feed them a purchased food every X period of time to wake them up.  With the company going out of business, the food is no longer available.

51. Nefertiti Berlin museums scan VS hacked Kinect scan

#### Below this line from brainstorming session ####

52. How you get targeted for ads/why you see the ads you see online

53. How can a computer be racist?

54. How many databases is your name in? How much information is collected on us?

55. How do computers detect emotion (grocery shopping, Toys R Us, etc)?

56. What's the smallest computer (smallest thing that could reasonably be called a computer)?

57. Robot vs Human - who's better at different things (list of ingredients for a meal, shopping, wine tasting challenges, robot sniffer vs dog, etc)?

58. Coming issue of Linux time (computers tell time based on milliseconds from 1970, when will that break, etc)?

59. Does any computer stuff work differently/not work in space (do bits get shifted, does something happen, etc)?

60. What is a line of computer code worth? What's the most valuable line of code?

61. How much do my smart home devices know about me?

62. Are computer languages biased (linguistics of it, how they're structured, characters used, etc)

63. Code secrets, things that are in private ropos, behind virtual gates and you can't know how they work (trade secrets)

64. The code that decides how long you spend in jail

65. 10 times that a bit being off changed history? (can we find a number of these examples)?

66. How long does memory last? How long until bit rot? Bring in stuff from the digital archivists that I know and love! Can a website/video game last forever?

67. How do restaurants use code? POS machines are obvious, is there smart ordering, code behind why the cashier has trouble putting your order in

68. Domain specific vs domain general for AI, dishwasher has a lot of little pieces with artificial intelligence (but domain specific - maybe like a Nest thermometer)

69. What would a smart restaurant look like (one that used all the tech/code that we have available now)? Inventory management, supply chains, etc.

70. Automations in farming that involve AI and code

71. Can you splice code into a living thing? Hide code in the DNA of an orange? Has anyone ever smuggled code that way?

72. When will you be replaced by a robot? A timeline for different professions/people?

73. Was code used in any interesting major heists? Banks, art, etc?

74. IBM and the extermination camps...how code can help facist dictators.

75. Why does a website ask you to mark all the square with cars?

76. The story of captas and how free porn sites were used to crack them

77. Why is it so hard for AI to figure out how to walk (look at some of the 2 minute papers videos on this subject)

78. What does it mean to 'jailbreak' a phone?

79. How does the 'hornet'/'salamander'/whatever it's called capture your cell phone connection and allow police to spy on your phone data?

80. Why are waves hard to model? What's the most complicated material/texture to model? What prevents animations from looking 100% like real life? Why is wind hard for computers to model?

81. Who owns code? The code in your tv? You coffee machine? The websites you visit?

82. Bugs we've talked about already...missing noh in pokemon, kill screens in donkey kong (buffer overflow), Ghandi going nuclear in Civ, the recent story about Outer World and the companion being dead bug

83. Video game speed records using glitches...maybe a specific interesting glitch, any of the glitches where you use the game to rewrite the code of the game

84. Good Bad Bug (bugs that make things better) and Big Bad Bugs (bugs that broke things and ruined them)

85. A look back at...how have we learned to do better, how have we fixed it (e.g. blue screen of death, Y2K, etc)

86. Why don't I get my trophies on Overcooked (when I'm playing couch co-op)

87. Single video game character with the most complicated code or the most code required to write them?

88. Be my rag doll, why video game physics take so little code these days...

89. Why aren't all video games systems backwards compatible? Which systems were harder to update games for?

90. Have games gotten harder to code or easier to code? What does it take to make a game?

91. Has AI generated any 'good' art/music/etc?

92. When do we know that AI is fully awake? Talk about Church, Turing, etc.

93. Magic the Gathering is turing complete (and other places where you can program but don't realize that you can). "This card game is technically a computer"

94. What would it take to make video game dialogue truly unique/interesting/generative? Dialogue trees that don't have to eventually branch back to the same generic line to continue the story...

95. Idle state, how we made more interesting idle states when characters aren't being plays (char stands there, bouncing in street fighter, sits down/stands up, finite state machines w/randomness, environmental interaction, etc)

96. The brains of different code? How don't starve characters have brains? How your favorite video game characters think?

97. I thought this game had no clipping! Why wall clipping is a thing. The code behind wall clipping.

98. The code behind being able to pet the dog in various video games. How much extra dev time, code, etc does it cost in the game development?

99. How big are big games? How many lines of code? What is the code doing?

100. Other examples of source code sorcery (like the Doom lighting one)

101. Overly simplifying but also complicating things (like the Polygon guy did with characters in Fire Emblem)...I made a computer language that's really simple, technically all of the code in X can be reduce/combined down/etc (Goedel Escher Bach), Take something you know like a game or Facebook and just keep whittling it down (tongue in cheek)

102. How code makes bullets fly. Hit boxes, hit detection, how has that evolved over time, bullet physics, etc.

103. How do multi-player games code for lag? How do you make sure different people on different connections have similar experiences?

